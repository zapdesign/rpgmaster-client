import Head from "next/head";
import styles from "@/styles/login.module.css";
import { useEffect, useState } from "react";
import { useMutation } from "react-query";
import axios from "axios";
import { URL } from "@/services/baseURL";
import { toast } from "react-toastify";
import { useRouter } from "next/router";
import { axiosInstance } from "@/services/axiosInstance";
var cookieCutter = require('cookie-cutter');


export default function Home() {
  const [ email, setEmail ] = useState('')
  const [ password, setPassword ] = useState('')

  const [ newEmail, setNewEmail ] = useState('')
  const [ newPass, setNewPass ] = useState('')
  const [ newPassTo, setNewPassTo ] = useState('')
  const [ newName, setNewName ] = useState('')

  const isValidEmail = (email: string): boolean => {
    // Regex para validar o formato de e-mail
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };


  const [ isNew, setIsNew ] = useState(false)

  const {push} = useRouter()

  const { mutate, isLoading } = useMutation(
    async () => 
      await axios.post(`${URL}/auth/login`, {
          email: email?.toLocaleLowerCase(),
          password: password
      }),
      {
        onSuccess: ({ data: data0 }) => {
          cookieCutter.set('@access_token', data0.acess_token, {
            path: "/",
            expires: new Date(new Date().getTime() + 60 * 60 * 23 * 1000),
          })
          push('/app/')
        },
        onError: (data: any) => {
          let msg = data.response.data.error
          if(typeof msg === "string"){
            if(msg === "Unauthorized"){
              msg = 'Sem autorização.'
            }

            if(msg === "Email or password provide is incorrect."){
              msg = 'Email ou senha estão incorretos.'
            }

            toast(msg, {
              position: "bottom-center",
              autoClose: 3000,
              type: "error",
            })
          }
        }
      }
  )

  const novoCadastro = async () => {

    if(!newName){
      toast('Preencha seu nome.', {
        position: "bottom-center",
        autoClose: 3000,
        type: "error",
      })

      return
    }

    if(!isValidEmail(newEmail)){
      toast('Preencha o email.', {
        position: "bottom-center",
        autoClose: 3000,
        type: "error",
      })

      return
    }

    if(!newPass && !newPassTo){
      toast('Preencha sua senha.', {
        position: "bottom-center",
        autoClose: 3000,
        type: "error",
      })

      return
    }

    if(newPass !== newPassTo){
      toast('Suas senhas não são iguais.', {
        position: "bottom-center",
        autoClose: 3000,
        type: "error",
      })

      return
    }


    try{
      await axiosInstance.post(`/users`,{
        email: newEmail.toLocaleLowerCase(),
        password: newPass,
        name: newName
      })

      setEmail(newEmail)
      setPassword(newPass)
      mutate()
      return

    }catch(err: any){

      let msg = err.response.data.message[0]

      if (msg === "password too weak") {
        msg = 'Sua senha é muito fraca.';
      }

      toast(msg, {
        position: "bottom-center",
        autoClose: 3000,
        type: "error",
      });

      return console.error(err);
    }
  }

  const cadastrar = (e: any) => {
    e.preventDefault();
    return novoCadastro()
  }

  const login = (e: any) => {
    e.preventDefault();
    return mutate()
  }

  
  return (
    <>
      <Head>
        <title>RPG Master | Login</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/icons/logo.svg" />
      </Head>
      <main className={styles.main}>
      <div className={styles.fundoGeral}>
        <div className={styles.fundoColorido}>

          <div className={styles.ajeitar01}>
            <h1 className={styles.texto1}>Sua sessão mais simples</h1>
            <p className={styles.texto2}>Organização para o jogador e o mestre, <br></br>conheça o RPG Master.</p>
          </div>

          <div className={styles.ajeitar}>
            <img className={styles.imgPlataforma} src="/login.png" alt="Foto tela inicial aplicativo RPG Master" />
          </div>

        </div>

        <div className={styles.fundoLogin}>

          <div className={styles.fundoForms}>

            <div className={styles.alinharCentro}>
              <img className={styles.logo} src="/logo.svg" alt="" />
            </div>


            {!isNew && <form onSubmit={login} className={styles.alinharForms}>
            <h2>Login</h2>



              <div className={styles.alinharCampoForms}>
                <label htmlFor="email" >Endereço de email</label>
                <input className={styles.inputForms} name="email" type="text" placeholder="example@name.com" onChange={(e: any) => setEmail(e.target.value)} />
              </div>

              <div className={styles.alinharCampoForms}>
                <label htmlFor="password" >Senha</label>
                <input className={styles.inputForms} name="password" type="password" placeholder="******" onChange={(e: any) => setPassword(e.target.value)}  />
              </div>
              
              <input className={styles.botaoForms} type="submit" value="Login" />

              <p style={{fontSize: '12px', textAlign: 'center', fontWeight: '300', marginTop: '10px'}}>se ainda não possuí uma conta, <span style={{color: '#5C3BC6', cursor: 'pointer'}} onClick={() => setIsNew(true)}>cadastre-se</span></p>
            
            </form>}
            {isNew && <form onSubmit={cadastrar} className={styles.alinharForms}>
            <h2>Cadastre-se</h2>

            <div className={styles.alinharCampoForms}>
                <label htmlFor="name" >Nome</label>
                <input className={styles.inputForms} name="name" type="text" placeholder="Digite seu nome" onChange={(e: any) => setNewName(e.target.value)} />
              </div>

              <div className={styles.alinharCampoForms}>
                <label htmlFor="email" >Endereço de email</label>
                <input className={styles.inputForms} name="email" type="text" placeholder="example@name.com" onChange={(e: any) => setNewEmail(e.target.value)} />
              </div>

              <div className={styles.alinharCampoForms}>
                <label htmlFor="password" >Senha</label>
                <input className={styles.inputForms} name="password" type="password" placeholder="Digite sua senha" onChange={(e: any) => setNewPass(e.target.value)}  />
                <input className={styles.inputForms} name="password" type="password" placeholder="Digite novamente" onChange={(e: any) => setNewPassTo(e.target.value)}  />
              </div>
              
              <input className={styles.botaoForms} type="submit" value="Cadastrar" />

              <p style={{fontSize: '12px', textAlign: 'center', fontWeight: '300', marginTop: '10px'}}>já possuí uma conta? <span style={{color: '#5C3BC6', cursor: 'pointer'}} onClick={() => setIsNew(false)}>Entrar</span></p>
            
            </form>}
          </div>
        </div>
      </div>
    </main>
    </>
  );
}
